#!/bin/sh
### BEGIN INIT INFO
# Provides:          lava-slave
# Required-Start:    $network $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: LAVA slave dispatcher
# Description:       Pipeline daemon for LAVA
### END INIT INFO

# Author: Neil Williams <codehelp@debian.org>

# example command:
# python dispatcher-slave.py --master tcp://localhost:5556 --socket-addr tcp://localhost:5555 --level DEBUG

# Default variables
MASTER_URL="tcp://localhost:5556"
LOGGER_URL="tcp://localhost:5555"
LOGLEVEL="DEBUG"
HOSTNAME=""
ENCRYPT=""
MASTER_CERT=""
SLAVE_CERT=""

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="lava-slave"                            # short description
NAME=lava-slave                              # short server's name
DAEMON="/usr/bin/lava-slave"                 # server's location
PIDFILE=/var/run/lava-slave.pid
SCRIPTNAME=/etc/init.d/lava-slave

# Read configuration variable files if present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME
# This script fragment can overwrite the variables defined above
[ -r /etc/lava-dispatcher/$NAME ] && . /etc/lava-dispatcher/$NAME

# Build the command line
DAEMON_ARGS="--master $MASTER_URL --socket-addr $LOGGER_URL --level $LOGLEVEL $ENCRYPT $MASTER_CERT $SLAVE_CERT $HOSTNAME"

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	unset VIRTUAL_ENV
	/sbin/start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	/sbin/start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
  rm -f $PIDFILE.lock
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	# ask the slave to re-open the log file
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	   status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	   ;;
  reload|force-reload)
	   log_daemon_msg "Reloading $DESC" "$NAME"
	   do_reload
	   log_end_msg $?
  ;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
